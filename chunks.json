{"id": "00811308fe368176", "content": "Brief: Sample embedded C header file with various constructs\n\n#define SAMPLE_HEADER_H\n\n#include <stdint.h>\n\n< Current device status\n\nstruct DeviceState {\n    uint8_t status;       /**< Current device status */\n    uint16_t errorCount;  /**< Number of errors encountered */\n    \n    /* Internal state variables */\n    uint32_t lastUpdateTime;\n    uint8_t reserved[4];\n}\n\nBrief: Maximum number of devices supported\n\n#define MAX_DEVICES 16\n\nBrief: Helper macro for checking status codes\nParameters:\n- x The status code to check\nReturns:\n- true if status is OK, false otherwise\n\ndefine IS_STATUS_OK(x) ((x) == STATUS_OK)\n\n#ifdef DEBUG_MODE\n/**\n * @brief Debug print macro\n */\n#define DEBUG_PRINT(fmt, ...) printf(\"[DEBUG] \" fmt \"\\n\", ##__VA_ARGS__)\n#else\n#define DEBUG_PRINT(fmt, ...) ((void)0)\n#endif\n\n/**\n * @brief Initialize the device with the given configuration\n * @param config Pointer to device configuration\n * @return Status code indicating success or failure\n */\nStatusCode_t Device_Init(const DeviceConfig_t* config);\n\nBrief: Helper macro for checking status codes\nParameters:\n- x The status code to check\nReturns:\n- true if status is OK, false otherwise\n\n#define IS_STATUS_OK(x) ((x) == STATUS_OK)\n\nBrief: Debug print macro\n\n#define DEBUG_PRINT(fmt, ...) printf(\"[DEBUG] \" fmt \"\\n\", ##__VA_ARGS__)\n\nBrief: Debug print macro\n\n#define DEBUG_PRINT(fmt, ...) ((void)0)\n\nBrief: Reset the device to default state\nReturns:\n- Status code indicating success or failure\n\nStatusCode_t Device_Reset(void);", "metadata": {"language": "c", "filepath": "parsing/sample_header.h", "chunk_units": [{"type": "preproc_def", "start": 8, "end": 10, "name": "SAMPLE_HEADER_H"}, {"type": "struct_specifier", "start": 35, "end": 42, "name": "DeviceState"}, {"type": "preproc_def", "start": 47, "end": 47, "name": "MAX_DEVICES"}, {"type": "declaration", "start": 54, "end": 70, "name": "IS_STATUS_OK"}, {"type": "preproc_function_def", "start": 54, "end": 54, "name": "IS_STATUS_OK"}, {"type": "preproc_function_def", "start": 60, "end": 60, "name": "DEBUG_PRINT"}, {"type": "preproc_function_def", "start": 62, "end": 62, "name": "DEBUG_PRINT"}, {"type": "declaration", "start": 76, "end": 76, "name": "Device_Reset"}], "conditional_context": ["SAMPLE_HEADER_H", "SAMPLE_HEADER_H", "SAMPLE_HEADER_H", "SAMPLE_HEADER_H", "SAMPLE_HEADER_H", "DEBUG_MODE", "DEBUG_MODE"]}}
{"id": "66c35ff15af5cc76", "content": "Brief: Reset the device to default state\nReturns:\n- Status code indicating success or failure\n\nStatusCode_t Device_Reset(void);\n\nBrief: Read the current device state\nParameters:\n- state Pointer to store the device state\nReturns:\n- Status code indicating success or failure\n\nStatusCode_t Device_GetState(DeviceState_t* state);\n\nBrief: Process incoming data from the device\nParameters:\n- data Pointer to input data buffer\n- size Size of the data buffer in bytes\n- processed Pointer to store number of bytes processed\nReturns:\n- Status code indicating success or failure\n\nStatusCode_t Device_ProcessData(\n    const uint8_t* data,\n    uint16_t size,\n    uint16_t* processed\n);\n\nComment: /* Internal function - not part of public API\n\nvoid _Device_UpdateInternalState(void);", "metadata": {"language": "c", "filepath": "parsing/sample_header.h", "chunk_units": [{"type": "declaration", "start": 76, "end": 76, "name": "Device_Reset"}, {"type": "declaration", "start": 83, "end": 83, "name": "Device_GetState"}, {"type": "declaration", "start": 92, "end": 96, "name": "Device_ProcessData"}, {"type": "declaration", "start": 99, "end": 99, "name": "_Device_UpdateInternalState"}], "conditional_context": []}}
